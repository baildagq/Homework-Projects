/*.h generated by pgen*/

#include "common.h"
#include "grammar.h"
enum{
    single_input=256,
    file_input=257,
    eval_input=258,
    funcdef=259,
    parameters=260,
    typedargslist=261,
    tfpdef=262,
    test=263,
    or_test=264,
    and_test=265,
    not_test=266,
    comparison=267,
    comp_op=268,
    expr=269,
    xor_expr=270,
    and_expr=271,
    shift_expr=272,
    arith_expr=273,
    term=274,
    factor=275,
    power=276,
    atom_expr=277,
    atom=278,
    trailer=279,
    subscriptlist=280,
    subscript=281,
    sliceop=282,
    argument=283,
    testlist_comp=284,
    arglist=285,
    testlist=286,
    exprlist=287,
    stmt=288,
    simple_stmt=289,
    small_stmt=290,
    nonlocal_stmt=291,
    global_stmt=292,
    expr_stmt=293,
    pass_stmt=294,
    flow_stmt=295,
    break_stmt=296,
    continue_stmt=297,
    return_stmt=298,
    yield_expr=299,
    comp_iter=300,
    comp_for=301,
    comp_if=302,
    augassign=303,
    suite=304,
    compound_stmt=305,
    if_stmt=306,
    while_stmt=307,
    for_stmt=308,
    classdef=309,
    dictorsetmaker=310,
};
Grammar *GetGrammar();
std::string NonTerminalMap(int i);